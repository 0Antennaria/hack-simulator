//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/DesktopInput 1.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DesktopInput 1"",
    ""maps"": [
        {
            ""name"": ""Icon"",
            ""id"": ""cbed684d-8464-46d1-9851-a318e86f8ea3"",
            ""actions"": [
                {
                    ""name"": ""Right Click"",
                    ""type"": ""Button"",
                    ""id"": ""10e65034-e5f6-42d8-a727-ee616020a8cc"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Double Click"",
                    ""type"": ""Button"",
                    ""id"": ""7a3dc223-d4de-4265-942a-ebf862f7ccbb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""428ee6ad-e822-4393-bcc8-915e4fed355c"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse and Keyboard"",
                    ""action"": ""Right Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9aae44a1-4f44-464a-b9af-165327e21d12"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""MultiTap"",
                    ""processors"": """",
                    ""groups"": "";Mouse and Keyboard"",
                    ""action"": ""Double Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""User"",
            ""id"": ""e76a5a66-af13-42fc-9a82-fff9cc7edfa5"",
            ""actions"": [
                {
                    ""name"": ""Right Click"",
                    ""type"": ""Button"",
                    ""id"": ""73bb599e-2b90-40f8-abe9-266361c89adf"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left Click"",
                    ""type"": ""Button"",
                    ""id"": ""7e97040b-5afb-4920-8544-221926acec38"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1b533644-514d-418a-be09-31885a98533b"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse and Keyboard"",
                    ""action"": ""Right Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""424b4d21-2878-46c7-b773-b6943c5a0504"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse and Keyboard"",
                    ""action"": ""Left Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse and Keyboard"",
            ""bindingGroup"": ""Mouse and Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Icon
        m_Icon = asset.FindActionMap("Icon", throwIfNotFound: true);
        m_Icon_RightClick = m_Icon.FindAction("Right Click", throwIfNotFound: true);
        m_Icon_DoubleClick = m_Icon.FindAction("Double Click", throwIfNotFound: true);
        // User
        m_User = asset.FindActionMap("User", throwIfNotFound: true);
        m_User_RightClick = m_User.FindAction("Right Click", throwIfNotFound: true);
        m_User_LeftClick = m_User.FindAction("Left Click", throwIfNotFound: true);
    }

    ~@PlayerInput()
    {
        UnityEngine.Debug.Assert(!m_Icon.enabled, "This will cause a leak and performance issues, PlayerInput.Icon.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_User.enabled, "This will cause a leak and performance issues, PlayerInput.User.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Icon
    private readonly InputActionMap m_Icon;
    private List<IIconActions> m_IconActionsCallbackInterfaces = new List<IIconActions>();
    private readonly InputAction m_Icon_RightClick;
    private readonly InputAction m_Icon_DoubleClick;
    public struct IconActions
    {
        private @PlayerInput m_Wrapper;
        public IconActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @RightClick => m_Wrapper.m_Icon_RightClick;
        public InputAction @DoubleClick => m_Wrapper.m_Icon_DoubleClick;
        public InputActionMap Get() { return m_Wrapper.m_Icon; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(IconActions set) { return set.Get(); }
        public void AddCallbacks(IIconActions instance)
        {
            if (instance == null || m_Wrapper.m_IconActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_IconActionsCallbackInterfaces.Add(instance);
            @RightClick.started += instance.OnRightClick;
            @RightClick.performed += instance.OnRightClick;
            @RightClick.canceled += instance.OnRightClick;
            @DoubleClick.started += instance.OnDoubleClick;
            @DoubleClick.performed += instance.OnDoubleClick;
            @DoubleClick.canceled += instance.OnDoubleClick;
        }

        private void UnregisterCallbacks(IIconActions instance)
        {
            @RightClick.started -= instance.OnRightClick;
            @RightClick.performed -= instance.OnRightClick;
            @RightClick.canceled -= instance.OnRightClick;
            @DoubleClick.started -= instance.OnDoubleClick;
            @DoubleClick.performed -= instance.OnDoubleClick;
            @DoubleClick.canceled -= instance.OnDoubleClick;
        }

        public void RemoveCallbacks(IIconActions instance)
        {
            if (m_Wrapper.m_IconActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IIconActions instance)
        {
            foreach (var item in m_Wrapper.m_IconActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_IconActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public IconActions @Icon => new IconActions(this);

    // User
    private readonly InputActionMap m_User;
    private List<IUserActions> m_UserActionsCallbackInterfaces = new List<IUserActions>();
    private readonly InputAction m_User_RightClick;
    private readonly InputAction m_User_LeftClick;
    public struct UserActions
    {
        private @PlayerInput m_Wrapper;
        public UserActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @RightClick => m_Wrapper.m_User_RightClick;
        public InputAction @LeftClick => m_Wrapper.m_User_LeftClick;
        public InputActionMap Get() { return m_Wrapper.m_User; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UserActions set) { return set.Get(); }
        public void AddCallbacks(IUserActions instance)
        {
            if (instance == null || m_Wrapper.m_UserActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UserActionsCallbackInterfaces.Add(instance);
            @RightClick.started += instance.OnRightClick;
            @RightClick.performed += instance.OnRightClick;
            @RightClick.canceled += instance.OnRightClick;
            @LeftClick.started += instance.OnLeftClick;
            @LeftClick.performed += instance.OnLeftClick;
            @LeftClick.canceled += instance.OnLeftClick;
        }

        private void UnregisterCallbacks(IUserActions instance)
        {
            @RightClick.started -= instance.OnRightClick;
            @RightClick.performed -= instance.OnRightClick;
            @RightClick.canceled -= instance.OnRightClick;
            @LeftClick.started -= instance.OnLeftClick;
            @LeftClick.performed -= instance.OnLeftClick;
            @LeftClick.canceled -= instance.OnLeftClick;
        }

        public void RemoveCallbacks(IUserActions instance)
        {
            if (m_Wrapper.m_UserActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUserActions instance)
        {
            foreach (var item in m_Wrapper.m_UserActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UserActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UserActions @User => new UserActions(this);
    private int m_MouseandKeyboardSchemeIndex = -1;
    public InputControlScheme MouseandKeyboardScheme
    {
        get
        {
            if (m_MouseandKeyboardSchemeIndex == -1) m_MouseandKeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouse and Keyboard");
            return asset.controlSchemes[m_MouseandKeyboardSchemeIndex];
        }
    }
    public interface IIconActions
    {
        void OnRightClick(InputAction.CallbackContext context);
        void OnDoubleClick(InputAction.CallbackContext context);
    }
    public interface IUserActions
    {
        void OnRightClick(InputAction.CallbackContext context);
        void OnLeftClick(InputAction.CallbackContext context);
    }
}
